openapi: 3.0.0
info:
  title: 'Venice.ai API'
  description: 'The Venice.ai REST API.'
  version: 1.0.0
  termsOfService: 'https://venice.ai/legal/tos'
externalDocs:
  description: 'Venice.ai API documentation'
  url: 'https://docs.venice.ai'
servers:
  -
    url: 'https://api.venice.ai/api/v1'
tags:
  -
    name: Chat
    description: 'Given a list of messages comprising a conversation, the model will return a response.'
  -
    name: Models
    description: 'List and describe the various models available in the API.'
  -
    name: Image
    description: 'Generate and manipulate images using AI models.'
security:
  -
    BearerAuth: []
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    ChatCompletionRequest:
      type: object
      properties:
        model:
          type: string
        messages:
          type: array
          items:
            anyOf:
              -
                type: object
                properties:
                  role: {type: string, enum: [user]}
                  content: {anyOf: [{type: string}, {type: array, items: {anyOf: [{type: object, properties: {type: {type: string, enum: [text]}, text: {type: string}}, required: [type, text]}, {type: object, properties: {type: {type: string, enum: [image_url]}, image_url: {type: object, properties: {url: {type: string}}, required: [url]}}, required: [type, image_url]}]}}]}
                required:
                  - role
                  - content
              -
                type: object
                properties:
                  role: {type: string, enum: [assistant]}
                  content: {anyOf: [{type: string}, {nullable: true}, {type: array, items: {type: object, properties: {type: {type: string, enum: [text]}, text: {type: string}}, required: [type, text]}}, {nullable: true}]}
                  name: {type: string}
                  tool_calls: {type: array, items: {nullable: true}}
                required:
                  - role
                  - content
              -
                type: object
                properties:
                  role: {type: string, enum: [tool]}
                  content: {type: string}
                  tool_calls: {type: array, items: {nullable: true}}
                  name: {type: string}
                  tool_call_id: {type: string}
                required:
                  - role
                  - content
                  - tool_call_id
              -
                type: object
                properties:
                  role: {type: string, enum: [system]}
                  content: {anyOf: [{type: string}, {type: array, items: {type: object, properties: {type: {type: string, enum: [text]}, text: {type: string}}, required: [type, text]}}]}
                  name: {type: string}
                required:
                  - role
                  - content
          minItems: 1
        venice_parameters:
          type: object
          properties:
            include_venice_system_prompt:
              type: boolean
            character_slug:
              type: string
        frequency_penalty:
          type: number
          maximum: 2
          minimum: -2
        presence_penalty:
          type: number
          maximum: 2
          minimum: -2
        n:
          type: number
        max_tokens:
          type: number
        max_completion_tokens:
          type: number
        temperature:
          type: number
          minimum: 0
          maximum: 2
        top_p:
          type: number
          minimum: 0
          maximum: 1
        stop:
          anyOf:
            -
              type: string
            -
              type: array
              items:
                type: string
              minItems: 1
              maxItems: 4
        stream:
          type: boolean
        stream_options:
          type: object
          properties:
            include_usage:
              type: boolean
        parallel_tool_calls:
          type: boolean
        tools:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
              type:
                type: string
              function:
                type: object
                properties:
                  description: {type: string}
                  name: {type: string}
                  parameters: {type: object, additionalProperties: {nullable: true}}
                required:
                  - name
                additionalProperties: false
            required:
              - function
        tool_choice:
          anyOf:
            -
              type: object
              properties:
                type:
                  type: string
                function:
                  type: object
                  properties: {name: {type: string}}
                  required: [name]
                  additionalProperties: false
              required:
                - type
                - function
              additionalProperties: false
            -
              type: string
      required:
        - model
        - messages
      additionalProperties: false
    ImageGenerationRequest:
      type: object
      properties:
        model:
          type: string
        prompt:
          type: string
          minLength: 1
          maxLength: 1500
        negative_prompt:
          type: string
          maxLength: 1500
        style_preset:
          type: string
        height:
          type: integer
          minimum: 0
          exclusiveMinimum: true
          maximum: 1280
        width:
          type: integer
          minimum: 0
          exclusiveMinimum: true
          maximum: 1280
        steps:
          type: integer
          minimum: 0
          exclusiveMinimum: true
          maximum: 50
        cfg_scale:
          type: number
          minimum: 0
          exclusiveMinimum: true
          maximum: 20
        seed:
          type: integer
          minimum: -999999999
          maximum: 999999999
        lora_strength:
          type: integer
          minimum: 0
          maximum: 100
        safe_mode:
          type: boolean
        return_binary:
          type: boolean
        hide_watermark:
          type: boolean
        inpaint:
          type: object
          properties:
            strength:
              type: integer
              minimum: 0
              maximum: 100
            source_image_base64:
              type: string
            mask:
              type: object
              properties:
                object_target:
                  type: string
                inferred_object:
                  type: string
              required:
                - object_target
                - inferred_object
          required:
            - strength
            - source_image_base64
      required:
        - model
        - prompt
      additionalProperties: false
  parameters: {}
paths:
  /chat/completions:
    post:
      operationId: createChatCompletion
      tags:
        - Chat
      summary: /api/v1/chat/completions
      description: 'Run text inference based on the supplied parameters.'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChatCompletionRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  id: {type: string, description: 'Unique identifier for the chat completion'}
                  object: {type: string, enum: [chat.completion], description: 'The object type'}
                  created: {type: integer, description: 'Unix timestamp of when the completion was created'}
                  model: {type: string, description: 'The model used for completion'}
                  choices: {type: array, items: {type: object, properties: {index: {type: integer}, message: {type: object, properties: {role: {type: string, enum: [assistant]}, content: {type: string, nullable: true}, refusal: {type: string, nullable: true}, tool_calls: {type: array, items: {type: object}}}, required: [role, content, refusal]}, finish_reason: {type: string, enum: [stop, length]}}, required: [index, message, finish_reason]}}
                  usage: {type: object, properties: {prompt_tokens: {type: integer}, completion_tokens: {type: integer}, total_tokens: {type: integer}}, required: [prompt_tokens, completion_tokens, total_tokens]}
                required:
                  - id
                  - object
                  - created
                  - model
                  - choices
              examples:
                'Basic completion response':
                  summary: 'Simple chat completion response'
                  value: {id: chatcmpl-123abc, object: chat.completion, created: 1677652288, model: dolphin-2.9.2-qwen2-72b, choices: [{index: 0, message: {role: assistant, content: 'Paris is the capital of France.', refusal: null, tool_calls: []}, finish_reason: stop}], usage: {prompt_tokens: 12, completion_tokens: 8, total_tokens: 20}}
                'Function calling response':
                  summary: 'Response with function calling'
                  value: {id: chatcmpl-456def, object: chat.completion, created: 1677652288, model: dolphin-2.9.2-qwen2-72b, choices: [{index: 0, message: {role: assistant, content: null, refusal: null, tool_calls: [{id: call_abc123, type: function, function: {name: get_weather, arguments: '{"location":"Paris, France"}'}}]}, finish_reason: stop}], usage: {prompt_tokens: 15, completion_tokens: 12, total_tokens: 27}}
        '400':
          description: 'Bad Request. Missing or malformed JSON content.'
        '404':
          description: 'Model not found. Validate supplied model is active.'
  /image/generate:
    post:
      operationId: generateImage
      summary: 'Generate an image based on input parameters'
      tags:
        - Image
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImageGenerationRequest'
      responses:
        '200':
          description: 'Successfully generated image'
          content:
            application/json:
              schema:
                type: object
                properties:
                  request: {type: string, description: 'Base64 encoded request data'}
                  images: {type: array, items: {type: string, description: 'Base64 encoded image data'}}
                  timing: {type: object, description: 'Inference timing information'}
            image/png:
              schema:
                type: string
                format: binary
                description: 'Raw image data when return_binary is true'
        '400':
          description: 'Invalid request parameters'
        '401':
          description: 'Authentication failed'
        '404':
          description: 'Model not found'
        '429':
          description: 'Rate limit exceeded'
        '500':
          description: 'Internal server error'
  /image/upscale:
    post:
      operationId: upscaleImage
      tags:
        - Image
      summary: /api/v1/image/upscale
      description: 'Upscale an image based on the supplied parameters.'
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: string
                  format: binary
                  description: 'The image to upscale. Must be a PNG file.'
              required:
                - image
      responses:
        '200':
          description: OK
          content:
            image/png:
              schema:
                type: string
                format: binary
        '400':
          description: 'Bad request. Will be returned if the content-type is not multipart/form-data or image is not a valid PNG.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: {oneOf: [{type: string, enum: ['No image provided', 'The uploaded file is corrupted or not readable']}, {type: array, items: {type: object, description: 'Zod validation errors for image dimensions'}}]}
                  message: {type: string, description: 'Additional error context'}
                  receivedContentType: {type: string, description: 'The content type that was received when invalid'}
        '401':
          description: 'Authentication failed'
        '413':
          description: 'Supplied image is too large. Limit is 5MB.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: {type: string, enum: ['File too large']}
        '415':
          description: 'Unsupported Media Type'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: {type: string, enum: ['Invalid Content-Type']}
                  message: {type: string}
                  receivedContentType: {type: string}
        '429':
          description: 'Rate limit exceeded'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: {type: string, enum: ['Rate limit exceeded']}
        '500':
          description: 'Error running inference.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: {type: string, enum: ['Inference failed']}
        '503':
          description: 'Model at capacity.'
  /models:
    get:
      operationId: listModels
      tags:
        - Models
      summary: /api/v1/models
      description: 'Returns a list of available models supported by the Venice.ai API for both text and image inference.'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  object: {type: string, enum: [list]}
                  data: {type: array, items: {type: object, required: [id, type, object, created, owned_by], properties: {id: {type: string, description: 'The model identifier, which can be referenced in the API endpoints.'}, type: {type: string, description: 'The type of the model.', enum: [text, image]}, object: {type: string, description: 'The object type, which is always "model".', enum: [model]}, created: {type: integer, description: 'The Unix timestamp (in seconds) when the model was created.'}, owned_by: {type: string, description: 'The organization that owns the model.'}, model_spec: {type: object, description: 'Specific model attributes that are unique to the model.', properties: {availableContextTokens: {type: integer, description: 'The context length supported by the model. Only applicable for text models.'}, traits: {type: array, description: 'Traits that apply to this model. You can specify a trait to auto-select a model vs. specifying the model ID in your request to avoid breakage as Venice updates and iterates on its models.', items: {type: string}, nullable: true}}}}}}
                required:
                  - object
                  - data
              examples:
                default:
                  summary: 'List of available models'
                  value: {object: list, data: [{id: dolphin-2.9.2-qwen2-72b, object: model, created: 1699000000, owned_by: venice.ai, type: text, model_spec: {availableContextTokens: 32768, traits: [most_intelligent, default]}}, {id: sdxl-1.0, object: model, created: 1699000000, owned_by: venice.ai, type: image, model_spec: {traits: [default]}}]}
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: {type: object, properties: {code: {type: string, nullable: true}, message: {type: string, nullable: false}, param: {type: string, nullable: true}, type: {type: string, nullable: false}}, required: [type, message, param, code]}
                required:
                  - error
